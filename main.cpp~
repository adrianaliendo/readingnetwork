#include <cstdlib>
#include <iostream>
#include <stdlib.h>
#include <mpi.h>
#include "omp.h"
#include "node.h"
#include "jsonfile.h"
#include "gpu.h"

//Using namespace std;

int main(int argc, char *argv[]){
	/*
 * 	Para compilar: mpic++ -fopenmp <clases>.cpp ReadingNetwork.cpp -o ReadingNetwork
 * 		Para ejecutar:mpirun ./ReadingNetwork -np <nro de procesadores> 
 * 			*/

    int numprocs, idnode;
    MPI::Init(argc,argv);
    MPI::COMM_WORLD.Set_errhandler(MPI::ERRORS_THROW_EXCEPTIONS);
    
    try{
        node cluster;

        if(cluster.idnode==0){
            std::cout << "Numero de procesadores:" << cluster.numprocs << ":" << endl;
            std::cout << "Numero de tareas:" << cluster.numtask << ":" << endl;
          /*  for(int i=0;i<cluster.numprocs;i++){
                std::cout << "El nodo " << i  << " Se llama:" << cluster.names[i] << endl;
                std::cout << "El nodo " << i  << " Tiene el nodo:" << cluster.idnodes[i] << endl;
                std::cout << "El nodo " << i  << " Tiene hilos:" << cluster.threads[i] << endl;
                std::cout << "El nodo tiene gpu si:" << cluster.gpusinfo[i].present << endl;
                if(cluster.gpusinfo[i].present){
                    std::cout << "Y tiene:" << cluster.gpusinfo[i].deviceCount << ": dispositivos" << endl;
                }
            }*/
		for(int i=0;i<cluster.numtask;i++){
			std::cout << "Y tiene:" << i << ":" << cluster.gpusinfo[i].deviceCount << ": dispositivos" << endl;
			std::cout << "Y tiene:" << i << ":" << cluster.gpusinfo[i].present << ": dispositivos" << endl;
		}
        }
        //Se escribe la informacion en formato json

         if(cluster.idnode==0){
            jsonfile jsonnodes;
            jsonnodes.setPathfile("json/prueba.json");
            jsonnodes.jsonwrite("{",true);
            string aux;
            for(int i=0;i<cluster.getNatr();i++){
                aux="\"";
                jsonnodes.jsonwrite(aux.append(cluster.getNameatr(i).append("\":")).append(cluster.getValueatr(i)),false);
            }

            jsonnodes.jsonwrite("}",false);
         }
      
    
    } catch(MPI::Exception e) {
        cout << "MPI ERROR: " << e.Get_error_code() << " - " << e.Get_error_string() << std::endl;
    }


std::cout << "Finaliza1" << endl;
try {
     MPI::Finalize();
} catch (MPI::Exception e) {
        cout << "MPI ERROR(F): " << e.Get_error_code() << " - " << e.Get_error_string() << std::endl;
    }
std::cout << "Finaliza2" << endl;

             
    return 0;

}

